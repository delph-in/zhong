;;; -*- Mode: TDL; Coding: utf-8 -*-

;;;;;;;;;;;;;;;;;;;
;;; Markers
;;;;;;;;;;;;;;;;;;;

吗_qp := x_-_qpart_le &
"""
[ma] Basic question particle for polar questions;
"""
  [ STEM < "吗" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "吗", LENGTH one ],
    TRAITS native_token_list ].

没有_qp_1 := x_-_qpart_le &
"""
This is similar to 吗 in most aspects, including that it can show up after sentence final 了.

[FIXME] However, this 'question particle' can only be used with sentences that are compatible with perfective (e.g. 了 and 过).
So we need to make a new type of question particles with this restriction.

<ex> 你 买 了 蔬菜 没有 ？
<ex> 你 买 蔬菜 没有 ？
Both sentences above will have the same meaning.

<nex> 你 要 买 蔬菜 没有 ？
<nex> 明天 你 去 学校 没有 ？

And, of course, it is also compatible with 过  (this is similar to the behavior of 没 as negation particle).
<ex> 你 吃 过 苹果 没有 ？
"""
  [ STEM < "没有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH two ],
    TRAITS native_token_list ].

没有_qp_2 := x_-_qpart_le &
"""
check: 没有_qp
没有 will be split in preprocessing, so we need this split entry.
"""
  [ STEM < "没","有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH two ],
    TRAITS native_token_list ].



好吗_qp_1 := x_-_qpart_le &
"""
This effectively transforms a statement into a question, by asking if it's ok. /please/ polite request.
[FIXME] Technically, they ought to be two different clauses... think about it. Maybe it should be an interrogative interjection.
"""
  [ STEM < "好吗" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH two ],
    TRAITS native_token_list ].

好吗_qp_2 := x_-_qpart_le &
"""
This effectively transforms a statement into a question, by asking if it's ok. /please/ polite request.
[FIXME] Technically, they ought to be two different clauses... think about it. Maybe it should be an interrogative interjection.

STEM split because we hope 吗 will eventually be split by preprocessing [FIXME], needs to be done.
"""
  [ STEM < "好","吗" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH two ],
    TRAITS native_token_list ].








呢_qp := x_-_fqpart_le &
  [ STEM < "呢" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "呢", LENGTH one ],
    TRAITS native_token_list ].

呢_crs := crs_le & 
  [ STEM <"呢">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "呢", LENGTH one ],
    TRAITS native_token_list ].
	
了_crs := crs_le & 
  [ STEM <"了">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "了", LENGTH one ],
    TRAITS native_token_list ].

吧_crs := crs_le & 
  [ STEM <"吧">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "吧", LENGTH one ],
    TRAITS native_token_list ].

啊_crs := crs_le & 
  [ STEM <"啊">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "啊", LENGTH one ],
    TRAITS native_token_list ].

呀_crs := crs_le &
"""
[yā] Sentence final particle equivalent to 啊 after a vowel, expressing surprise or doubt;
<ex>  什么 时候 出发 呀 ？
"""
  [ STEM <"呀">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "啊", LENGTH one ],
    TRAITS native_token_list ].

啦_crs := crs_le & 
  [ STEM <"啦">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "啦", LENGTH one ],
    TRAITS native_token_list ].

而已_crs := crs_le & 
  [ STEM <"而已">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "而", LENGTH one ],
    TRAITS native_token_list ].

的_crs := crs_le & 
  [ STEM <"的">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "的", LENGTH one ],
    TRAITS native_token_list ].

了_pfv := pfv-marker_le &
"""
This is the normal perfective marker LE.
"""
  [ STEM <"了">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "了", LENGTH one ],
    TRAITS native_token_list ].


; 着_dur_robust := dur-marker &
;   [ STEM <"着">,
;     STYLE robust,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "着", LENGTH one ],
;     SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.LZG le+guo ] >,
;     TRAITS native_token_list ].


; 过_exp_robust := exp-marker &
;   [ STEM <"过">,
;     STYLE robust,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "过", LENGTH one ],
;     SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.LZG le+zhe ] >,
;     TRAITS native_token_list ].

被_v := x_bei_le &
  [ STEM <"被">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "被", LENGTH one ],
    TRAITS native_token_list ].

把_v_1 := x_ba_le &
  [ STEM <"把">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "把", LENGTH one ],
    TRAITS native_token_list ].

地_r := x_-_suf-adv_le &
[ STEM < "地" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "地", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_地_a_rel",
    TRAITS native_token_list ].

; ;LMC: COMMENTED OUT BECAUSE THIS WAS UPGRADED TO A MODAL VERB
; 得_r := x_-_pre-adv_le &
; [ STEM < "得" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "得", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED "_得_a_rel",
;     TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; Basic Pronouns
;;;;;;;;;;;;;;;;;;;

我_n := n_-_pr-1sg_le &
  [ STEM < "我" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "我", LENGTH one ],
    TRAITS native_token_list ].

你_n := n_-_pr-2sg_le &
  [ STEM < "你" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH one ],
    TRAITS native_token_list ].

您_n := n_-_pr-2sg-hon_le &
  [ STEM < "您" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "您", LENGTH one ],
    TRAITS native_token_list ].

他_n := n_-_pr-3sg_le &
  [ STEM < "他" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "他", LENGTH one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GENDER masc,
				       ANIMACY human ],
    TRAITS native_token_list ].

她_n := n_-_pr-3sg_le &
  [ STEM < "她" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "她", LENGTH one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GENDER fem,
				       ANIMACY human ],
    TRAITS native_token_list ].

它_n := n_-_pr-3sg_le &
  [ STEM < "它" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "它", LENGTH one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY non-human,
    TRAITS native_token_list ].

之_n := n_-_pr-3sg_le &
  [ STEM < "之" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "之", LENGTH one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY non-human,
    TRAITS native_token_list ].

我们_n := n_-_pr-1pl-excl_le &
  [ STEM < "我们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "我", LENGTH more-than-one ],
    TRAITS native_token_list ].


我们俩_n := n_-_pr-1pl-excl_le &
  [ STEM < "我们俩" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "我", LENGTH more-than-one ],
    TRAITS native_token_list ].


我俩_n := n_-_pr-1pl-excl_le &
  [ STEM < "我俩" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "我", LENGTH more-than-one ],
    TRAITS native_token_list ].


咱们_n := n_-_pr-1pl-incl_le &
  [ STEM < "咱们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "咱", LENGTH more-than-one ],
    TRAITS native_token_list ].

咱们俩_n := n_-_pr-1pl-incl_le &
  [ STEM < "咱们俩" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "咱", LENGTH more-than-one ],
    TRAITS native_token_list ].

咱俩_n := n_-_pr-1pl-incl_le &
  [ STEM < "咱俩" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "咱", LENGTH more-than-one ],
    TRAITS native_token_list ].


你们_n := n_-_pr-2pl_le &
  [ STEM < "你们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH more-than-one ],
    TRAITS native_token_list ].

你们_n_split := n_-_pr-2pl_le &
  [ STEM < "你", "们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH more-than-one ],
    TRAITS native_token_list ].


他们_n := n_-_pr-3pl_le &
  [ STEM < "他们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "他", LENGTH more-than-one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GENDER masc,
				       ANIMACY human ],
    TRAITS native_token_list ].

她们_n := n_-_pr-3pl_le &
  [ STEM < "她们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "她", LENGTH more-than-one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GENDER fem,
				       ANIMACY human ],
    TRAITS native_token_list ].

它们_n := n_-_pr-3pl_le &
  [ STEM < "它们" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "它", LENGTH more-than-one ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY non-human,
    TRAITS native_token_list ].

大家_n := n_-_indef-pr_le &
 [ STEM < "大家" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "大", LENGTH more-than-one ],
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY human,
	    LKEYS [ KEYREL.PRED person_n_rel,
		    ALTKEYREL.PRED every_q_rel ] ],
   TRAITS native_token_list ].


有人_n := n_-_indef-pr_le &
 [ STEM < "有人" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH more-than-one ],
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY human,
	    LKEYS [ ALTKEYREL.PRED some_q_rel ] ],
   TRAITS native_token_list ].

一切_n := n_-_indef-pr_le &
 [ STEM < "一切" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "一", LENGTH more-than-one ],
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.ANIMACY inanimate,
	    LKEYS [ ALTKEYREL.PRED every_q_rel ] ],
   TRAITS native_token_list ].

有些_n := n_-_indef-pr_le &
 [ STEM < "有些" >,
   SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH more-than-one ],
   SYNSEM [ LKEYS [ ALTKEYREL.PRED some_q_rel ] ],
   TRAITS native_token_list ].

这儿_n := n_-_pr-loc_le &
  [ STEM < "这儿" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED prox_dem_q_rel,
    TRAITS native_token_list ].


这里_p := n_-_pr-loc_le &
  [ STEM < "这里" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED prox_dem_q_rel,
    TRAITS native_token_list ].

这边_p := n_-_pr-loc_le &
  [ STEM < "这边" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED prox_dem_q_rel,
    TRAITS native_token_list ].

那儿_p := n_-_pr-loc_le &
  [ STEM < "那儿" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "那", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED dist_dem_q_rel,
    TRAITS native_token_list ].

那边_p := n_-_pr-loc_le &
  [ STEM < "那边" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "那", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED dist_dem_q_rel,
    TRAITS native_token_list ].

那里_p := n_-_pr-loc_le &
  [ STEM < "那里" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "那", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED dist_dem_q_rel,
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;;;
;;; Question Words
;;;;;;;;;;;;;;;;;;;;;
;;; 疑问代词主要有16个：
;;; 1、问事物、时间、处所和数量的主要有8个：谁、何、什么，哪儿、哪里，几时、几、多少
;;; 2、问方式、性状和原因的主要有8个：怎、怎么、怎的、怎样、怎么样、怎么着、如何、为什么

什么_d_q := d_-_wh-nocls_le &
  [ STEM < "什么" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "什", LENGTH two ],
    TRAITS native_token_list ].

什么_n_q := n_-_pr-wh_le &
  [ STEM <"什么">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "什", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED thing_n_rel,
    TRAITS native_token_list ].

甚么_d_q := d_-_wh-nocls_le &
"""
[FIXME] Variant of 什么  (need to check if this should be robust/mal)
"""
  [ STEM < "甚么" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "甚", LENGTH two ],
    TRAITS native_token_list ].

甚么_n_q := n_-_pr-wh_le &
"""
[FIXME] Variant of 什么  (need to check if this should be robust/mal)
"""
  [ STEM <"甚么">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "甚", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED thing_n_rel,
    TRAITS native_token_list ].


几_d_q := d_-_wh_le &
  [ STEM < "几" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "几", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _how-many_q_rel,
    TRAITS native_token_list ].

多少_d_q := d_-_wh_le &
  [ STEM < "多少" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "多", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED _how-many_q_rel,
    TRAITS native_token_list ].

多少_n_q := n_-_pr-wh_le &
  [ STEM <"多少">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "多", LENGTH two ],
    TRAITS native_token_list ].

多少_n_1 := n_-_indef-pr_le &
  [ STEM < "多少" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "多", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED "_多少_n_rel",
    TRAITS native_token_list ].

哪_d_q := d_-_wh_le &
  [ STEM < "哪" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
	     LKEYS.KEYREL.PRED which_q_rel ],
    TRAITS native_token_list ].

哪些_d_q := d_-_wh-nocls_le &
  [ STEM < "哪些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH two ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl,
	     LKEYS.KEYREL.PRED which_q_rel ],
    TRAITS native_token_list ].

哪_n_q := n_-_pr-wh_le &
[ STEM <"哪">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH one ],
    TRAITS native_token_list ].

哪儿_n_q := n_-_pr-wh_le &
  [ STEM <"哪儿">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED place_n_rel,
    TRAITS native_token_list ].

哪里_n_q := n_-_pr-wh_le &
  [ STEM <"哪里">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED place_n_rel,
    TRAITS native_token_list ].

哪里_r_q := adv_-_vp-pre_le &
  [ STEM < "哪里" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_哪里_a_1_rel",
    TRAITS native_token_list ].

谁_n_q := n_-_pr-wh_le &
  [ STEM <"谁">,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "谁", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED person_n_rel,
    TRAITS native_token_list ].

有没有_r_q := adv_-_scop_q_le &
  [ STEM < "有没有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_有没有_a_1_rel",
    TRAITS native_token_list ].

有没有_r_q_2 := adv_-_scop_q_le &
"""
有没 will be split in preprocessing, so we need this split entry.
"""
  [ STEM < "有","没","有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_有没有_a_1_rel",
    TRAITS native_token_list ].


为什么_r_q := adv_-_scop_q_le &
  [ STEM < "为什么" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "为", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_为什么_a_1_rel",
    TRAITS native_token_list ].

为甚么_r_q := adv_-_scop_q_le &
"""
[FIXME] This is a variant of 为什么. I need to check if this should be robust/mal.
"""
  [ STEM < "为甚么" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "为", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_为甚么_a_1_rel",
    TRAITS native_token_list ].


为何_r_q := adv_-_scop_q_le &
  [ STEM < "为何" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "为", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_为何_a_1_rel",
    TRAITS native_token_list ].

没有_r_q_1 := adv_-_scop-post_q_le &
"""
[FIXME] This is problem the same as 没有_qp_1.

"""
  [ STEM < "没有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_没有_a_2_rel",
    TRAITS native_token_list ].

没有_r_q_2 := adv_-_scop-post_q_le &
"""

没有 is being split in in GREP, so we need this split entry.
"""
  [ STEM < "没", "有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_没有_a_2_rel",
    TRAITS native_token_list ].


怎么_r_1 := adv_-_vp-pre_q_le &
  [ STEM < "怎么" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "怎", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_怎么_a_1_rel",
    TRAITS native_token_list ].

怎么样_j_1 := a_-_pred_q_le &
  [ STEM < "怎么样" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "怎", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_怎么样_a_1_rel",
    TRAITS native_token_list ].

星期几_n_q := n_-_tm_q_le &
  [ STEM < "星期几" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "星", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_星期几_n_1_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; Special Verbs
;;;;;;;;;;;;;;;;;;;


是_v_2 := v_inv-shide_le &
"""
[FIXME] This 是 should be used only for SHI-DE constructions but it's not sufficiently constrained . This was also interacting with aspect... I added 'no-lzg-asp' for now.
It is also taking VP subjects... not sure if this is the desired behaviour.
"""
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "是_v_cop_rel",
    SYNSEM.LOCAL.CAT.HEAD.LZG no-lzg-asp,
    TRAITS native_token_list ].

shide_adp := v_shide-adp_le &
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    TRAITS native_token_list ].

shide_scop := v_shide-adv-scop_le &
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    TRAITS native_token_list ].

shide_aux := v_shide-aux_le &
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    TRAITS native_token_list ].

shide_sbj := v_shide-sbj_le &
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    TRAITS native_token_list ].

有_v_1 := v_np_you_le &
  [ STEM < "有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_有_v_1_rel",
    TRAITS native_token_list ].


;;;;;;;;;;;;;;;;;;;
;;; Determiners
;;;;;;;;;;;;;;;;;;;

一些_d := d_-_le &
  [ STEM < "一些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "一", LENGTH more-than-one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl,
	     LKEYS.KEYREL.PRED some_q_rel ],
    TRAITS native_token_list ].

一种_d := d_-_le &
  [ STEM < "一种" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "一", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED some_q_rel,
    TRAITS native_token_list ].

个中_d := d_-_le &
  [ STEM < "个中" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "个", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED _个中_q_rel,
    TRAITS native_token_list ].

些_d := d_-_le &
  [ STEM < "些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "些", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED some_q_rel,
    TRAITS native_token_list ].

其_d := d_-_le &
  [ STEM < "其" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "其", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _其_q_rel,
    TRAITS native_token_list ].

其中_n := d_-_le &
  [ STEM < "其中" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "其", LENGTH two ],
    TRAITS native_token_list ].

其它_d := d_-_le &
  [ STEM < "其它" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "其", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED _其它_q_rel,
    TRAITS native_token_list ].

所有_d := d_-_le &
  [ STEM < "所有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "所", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED every_q_rel,
    TRAITS native_token_list ].

所有_partitive_d := d_-_prt_le &
  [ STEM < "所有" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "所", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED every_q_rel,
    TRAITS native_token_list ].

有些_d := d_-_le &
  [ STEM < "有些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "有", LENGTH more-than-one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl,
	     LKEYS.KEYREL.PRED some_q_rel ],
    TRAITS native_token_list ].

某_d := d_-_le &
  [ STEM < "某" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "某", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED some_q_rel,
    TRAITS native_token_list ].

此_d := d_-_le &
  [ STEM < "此" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "此", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _此_q_rel,
    TRAITS native_token_list ].

每_d := d_-_le &
  [ STEM < "每" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "每", LENGTH one ],
	SYNSEM.LKEYS.KEYREL.PRED every_q_rel,
    TRAITS native_token_list ].

这_d := d_-_d-prox_le &
  [ STEM < "这" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
	     LKEYS.KEYREL.PRED prox_dem_q_rel ],
    TRAITS native_token_list ].

这些_d := d_-_d-prox-nocls_le &
  [ STEM < "这些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH more-than-one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl,
	     LKEYS.KEYREL.PRED prox_dem_q_rel ],
    TRAITS native_token_list ].

这些_n_1 := n_-_indef-pr_le &
  [ STEM < "这些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "这", LENGTH two ],
    SYNSEM.LKEYS.ALTKEYREL.PRED "_这些_n_rel",
    TRAITS native_token_list ].

那_d := d_-_d-dist_le &
  [ STEM < "那" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "那", LENGTH one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd,
	     LKEYS.KEYREL.PRED dist_dem_q_rel ],
    TRAITS native_token_list ].

那些_d := d_-_d-dist-nocls_le &
  [ STEM < "那些" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "那", LENGTH more-than-one ],
    SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl,
	     LKEYS.KEYREL.PRED dist_dem_q_rel ],
    TRAITS native_token_list ].

;;temporary KIV
;can't have classifier afterwards
各种_d := d_-_le &
  [ STEM < "各种" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "各", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED _各种_q_rel,
    TRAITS native_token_list ].

一系列_n := n_-_indef-pr_le &
  [ STEM < "一系列" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "一", LENGTH more-than-one ],
    SYNSEM.LKEYS.ALTKEYREL.PRED "_一系列_n_rel",
    TRAITS native_token_list ].

半截_n := n_-_indef-pr_le &
  [ STEM < "半截" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "半", LENGTH more-than-one ],
    SYNSEM.LKEYS.ALTKEYREL.PRED "_半截_n_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; Negative Operators
;;;;;;;;;;;;;;;;;;;

别_r := adv_-_imp_le &
[ STEM <"别">,
  SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "别", LENGTH one ],
  SYNSEM.LKEYS.KEYREL.PRED neg_x_rel,
  TRAITS native_token_list ].

;; WWJ 2015-02-08: TEMPORARY. 不 cannot co-occur with 有; 
;; To block that temporarily, the exist_v has been given a property EXISTV +


不起_r := adv_-_neg_le &
  [ STEM < "不起" >,
    SYNSEM.LOCAL.CAT.POSTHEAD +,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH two ],
    SYNSEM [ LKEYS.KEYREL.PRED _buqi_x_rel,
	     LOCAL.CAT.HEAD.MOD < [ LOCAL [ CONT.HOOK.INDEX.E.ASPECT non-aspect, 
		                            CAT.HEAD.EXISTV - ] ] > ],
    TRAITS native_token_list ].


; 不_polar_basic_r := adv_-_polar2_basic_le &
;   [ STEM < "不" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _bu_polar_x_rel,
;     TRAITS native_token_list ].

; 不_polar_contracted_r := adv_-_polar2_contracted_le &
;   [ STEM < "不" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _bu_polar_x_rel,
;     TRAITS native_token_list ].

; 不_polar_ab-not-ab_r := adv_-_polar2_ab-not-ab_le &
;   [ STEM < "不" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _bu_polar_x_rel,
;     TRAITS native_token_list ].


; 没_v_1 := v_np_you_le &
; """
; [FIXME] This should possibly not exist.
; <???>学校 里 没 狗 叫 。
; (at school there isn't a dog that barks)?

; And if it's possible, what other ASPECT can it take? 
; Set to 'no-lzg-asp for' now.
; """
;   [ STEM < "没" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED "_没有_v_1_rel",
;     SYNSEM.LOCAL.CAT.HEAD.LZG no-lzg-asp,
;     TRAITS native_token_list ].


没_v_2 := v_np_le &
"""
[FIXME] should split into two predicates.

[NON-LOCAL.SLASH 0-dlist] to block extracttions. I'm not convinced that is necessary.
"""
  [ STEM < "没" >,
    SYNSEM [ BARE +,  ; block this from participating in rsltv constructions
	     LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH one ],
	     LKEYS.KEYREL.PRED "_没有_v_2_rel",
	     LOCAL.CAT.HEAD.LZG no-lzg-asp,
	     NON-LOCAL.SLASH 0-dlist],
    TRAITS native_token_list ].

; 没_polar_basic_r := adv_-_polar_basic_le &
;   [ STEM < "没" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _mei_polar_x_rel,
;     TRAITS native_token_list ].

; 没_polar_contracted_r := adv_-_polar_contracted_le &
;   [ STEM < "没" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _mei_polar_x_rel,
;     TRAITS native_token_list ].

; 没_polar_ab-not-ab_r := adv_-_polar_ab-not-ab_le &
;   [ STEM < "没" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "没", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _mei_polar_x_rel,
;     TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; Intensifiers
;;;;;;;;;;;;;;;;;;;

很_r := adv_-_deg-pre_le &
  [ STEM < "很" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "很", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _hen_x_rel,
    TRAITS native_token_list ].

非常_r := adv_-_deg-pre_le &
  [ STEM < "非常" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "非常", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED _feichang_x_rel,
    TRAITS native_token_list ].


挺_r := adv_-_deg-pre_le &
"""
[tǐng] extremely; very; quite;

[FIXME] Not sure why these are using fancy named predicates. Maybe because they though they would be selected, somehow?
"""
  [ STEM < "挺" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "挺", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _ting_x_rel,
    TRAITS native_token_list ].



不_intersective_r := adv_-_deg-pre_le &
"""
This 不 can be used as degree specifier, making sentences fully specified (and not waiting for futher degree specifiers to be licenced as correct).
<ex> 他 不 聪明 。
"""
  [ STEM < "不" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _bu_x_rel,
    TRAITS native_token_list ].



;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SSH 2015-04-16
;; three types of 在
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; [1] predicative 在 (ex. 我 在 教室 。)
;; This item should be used as the main predicate in a sentence.
;; ZZF 2016-11-10 try treating this as verb, as we can have 
;; 他 在 吗？ 他 在 不 在 ？ 他 在 不 在 家 ？
;; borrowing 'BARE' feature from bare NP to stop it being consumed by rslt rules
;;;;;;;;;;;;;;;;;;;;;;;;;;

在_v_1 := v_np_le &
"""

Being a bit more strict with 在 since it competes a lot with other entries. 

[FIXME] Add [NON-LOCAL.SLASH < >] to prevent extrations. But v_np_le doesn't allow it.
"""
  [ STEM < "在" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ],
    SYNSEM [ LOCAL.CAT.HEAD.LZG bu-asp,
             BARE +,
	     NON-LOCAL.SLASH 0-dlist,
             LKEYS.KEYREL.PRED "_在_v_rel" ],
    TRAITS native_token_list ]. 

; #|
; 在_p_1 := p_-_nomod_le &
;   [ STEM < "在" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ],
;     SYNSEM.LOCAL.CAT.HEAD.PFORM zai,
;     SYNSEM [ LOCAL.CAT.HEAD.LZG le,
; 	     LKEYS.KEYREL.PRED "_在_p_rel" ],
;     TRAITS native_token_list ].
; |#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; [2] ordinary preposition 在 (ex. 我 在 教室 哭 了 。)
;; This item constitutes a PP and the PP modifies a VP or an S.
;;;;;;;;;;;;;;;;;;;;;;;;;; 
在_p_2 := p_-_n-mod_le &
  [ STEM < "在" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ],
    SYNSEM.LOCAL.CAT.HEAD.PFORM zai,
    SYNSEM [ LKEYS.KEYREL.PRED "_在_p_rel" ],
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; [3] locative 在 (ex. 我 在 教室 里 哭 了  。)
;;   (i)This item should take a 里-PP as its complement (i.e. [PP 在 [LOCP 教室 里 ]]) and 
;;   (ii) the lexical item itself is semantically empty (like 'by' in English passives).
;;         cf. 我 教室 里 哭 了
;;;;;;;;;;;;;;;;;;;;;;;;;; 
; 在_loc := p_loc_zai_le &
;   [ STEM < "在" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ],
;     SYNSEM.LOCAL.CAT.HEAD.PFORM zai,
;     SYNSEM [ LOCAL.CAT.HEAD.LZG le ],
;     TRAITS native_token_list ].


; 在_r_2 := adv_-_vp-pre_le &
;   [ STEM < "在" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED "_在_a_2_rel",
;     TRAITS native_token_list ].

; 在_v_1 := v_np_le &
;   [ STEM < "在" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "在", LENGTH one ], 
;     SYNSEM.LOCAL.CAT.HEAD.STATIVE +,
;     SYNSEM.LKEYS.KEYREL.PRED "_在_v_1_rel",
;     SYNSEM.LOCAL.CAT.HEAD.LZG le,
;     TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; DE 
;;;;;;;;;;;;;;;;;;;

的_assoc_n := x_-_assoc-de-n_le &
 [ STEM < "的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "的", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _de_p_assoc_rel,
    TRAITS native_token_list ].

的_assoc_v := x_-_assoc-de-v_le &
 [ STEM < "的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "的", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _de_p_assoc_rel,
    TRAITS native_token_list ].

的_comp := x_-_rel-de_le &
""" Complementizer 的, used for relative clauses."""
  [ STEM < "的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "的", LENGTH one ],
    TRAITS native_token_list ].

的_shide-altobj := x_-_altobj-de_le & 
  [ STEM < "的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "的", LENGTH one ],
    TRAITS native_token_list ].

之_ASSOC_d := x_-_assoc-de-n_le &
 [ STEM < "之" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "之", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED _zhi_dem_q_rel,
    TRAITS native_token_list ].

; #|need to change to pronoun
; 之_nominalizer_n := x_-_nom-de_le &
;   [ STEM < "之" >,
;     SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "之", LENGTH one ],
;     SYNSEM.LKEYS.KEYREL.PRED _zhi_nom_rel,
;     TRAITS native_token_list ].
; |#

所_x := x_suo_le &
  [ STEM < "所" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "所", LENGTH one ],
    TRAITS native_token_list ].




;;;;;;;;;;;;;;;;;;;
;;; Interjections
;;;;;;;;;;;;;;;;;;;



呸_ij := adv_-_ij_le &
  [ STEM < "呸" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "呸", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_呸_x_rel",
    TRAITS native_token_list ].

哎_ij := adv_-_ij_le & 
  [ STEM < "哎" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哎", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_哎_x_rel",
    TRAITS native_token_list ].

哎呀_ij := adv_-_ij_le & 
  [ STEM < "哎呀" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哎呀", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_哎呀_x_rel",
    TRAITS native_token_list ].

哦_ij := adv_-_ij_le & 
  [ STEM < "哦" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哦", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_哦_x_rel",
    TRAITS native_token_list ].

唉_ij := adv_-_ij_le &
  [ STEM < "唉" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "唉", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_唉_x_rel",
    TRAITS native_token_list ].

嗨_ij := adv_-_ij_le &
  [ STEM < "嗨" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "嗨", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_嗨_x_rel",
    TRAITS native_token_list ].

嗨咿_ij := adv_-_ij_le &
  [ STEM < "嗨咿" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "嗨", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED "_嗨咿_x_rel",
    TRAITS native_token_list ].

嗯_ij := adv_-_ij_le & 
  [ STEM < "嗯" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "嗯", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_嗯_x_rel",
    TRAITS native_token_list ].

嘿_ij := adv_-_ij_le & 
  [ STEM < "嘿" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "嘿", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_嘿_x_rel",
    TRAITS native_token_list ].

嘿唷_ij := adv_-_ij_le &
  [ STEM < "嘿唷" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "嘿", LENGTH more-than-one ],
    SYNSEM.LKEYS.KEYREL.PRED "_嘿唷_x_rel",
    TRAITS native_token_list ].

噢_ij := adv_-_ij_le & 
  [ STEM < "噢" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "噢", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_噢_x_rel",
    TRAITS native_token_list ].

哈_ij := adv_-_ij_le & 
  [ STEM < "哈" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哈", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_哈_x_rel",
    TRAITS native_token_list ].

啊_ij := adv_-_ij_le & 
  [ STEM < "啊" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "啊", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_啊_x_rel",
    TRAITS native_token_list ].

阿_ij := adv_-_ij_le & 
  [ STEM < "阿" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "阿", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_啊_x_rel",
    TRAITS native_token_list ].

;;common phrases used in discourse

是的_ij := adv_-_ij_le & 
  [ STEM < "是的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_是的_x_rel",
    TRAITS native_token_list ].

好的_ij := adv_-_ij_le & 
  [ STEM < "好的" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_好的_x_rel",
    TRAITS native_token_list ].

好_ij := adv_-_ij-prehd_le & 
  [ STEM < "好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_好_x_rel",
    TRAITS native_token_list ].

喂_ij := adv_-_ij_le & 
  [ STEM < "喂" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "喂", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_喂_x_rel",
    TRAITS native_token_list ].

OK_ij := adv_-_ij_le & 
  [ STEM < "OK" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "OK", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_OK_x_rel",
    TRAITS native_token_list ].

是_ij := adv_-_ij-prehd_le & 
  [ STEM < "是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_是_x_rel",
    TRAITS native_token_list ].

不_ij := adv_-_ij-prehd_le & 
  [ STEM < "不" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_不_x_rel",
    TRAITS native_token_list ].

你好_ij := adv_-_ij_le & 
  [ STEM < "你好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_你好_x_rel",
    TRAITS native_token_list ].

你+好_ij := adv_-_ij_le & 
  [ STEM < "你", "好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_你好_x_rel",
    TRAITS native_token_list ].

你们好_ij := adv_-_ij_le & 
  [ STEM < "你们好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "你", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_你们好_x_rel",
    TRAITS native_token_list ].

您好_ij := adv_-_ij_le & 
  [ STEM < "您好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "您", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_你好_x_rel",
    TRAITS native_token_list ].

您+好_ij := adv_-_ij_le & 
  [ STEM < "您", "好" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "您", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_你好_x_rel",
    TRAITS native_token_list ].

对了_ij := adv_-_ij_le &
"""

了 is split by default, so this requires 2 tokens.
"""
  [ STEM < "对","了" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "对", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_对了_x_rel",
    TRAITS native_token_list ].

谢谢_ij := adv_-_ij_le & 
  [ STEM < "谢谢" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "谢", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_谢谢_x_rel",
    TRAITS native_token_list ].

好吧_ij := adv_-_ij_le & 
  [ STEM < "好吧" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_好吧_x_rel",
    TRAITS native_token_list ].

好啊_ij := adv_-_ij_le & 
  [ STEM < "好啊" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "好", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_好啊_x_rel",
    TRAITS native_token_list ].

不用谢_ij := adv_-_ij_le & 
  [ STEM < "不用谢" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_不用谢_x_rel",
    TRAITS native_token_list ].

不谢_ij := adv_-_ij_le & 
  [ STEM < "不谢" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_不用谢_x_rel",
    TRAITS native_token_list ].

哪里_ij := adv_-_ij-prehd_le &
  [ STEM < "哪里" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "哪", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_哪里_x_rel",
    TRAITS native_token_list ].

请问_ij := adv_-_ij-prehd_le &
"""
[FIXME] This should only introduce questions.
"""
  [ STEM < "请问" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "请", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_请问_x_rel",
    TRAITS native_token_list ].

请_ij := adv_-_ij-prehd_le &
"""
[FIXME] This should probably only introduce (polite) imperatives/requests.
It should probably require the subj be 1st(pl)/2nd person (sg/pl).
"""
  [ STEM < "请" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "请", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_请_x_rel",
    TRAITS native_token_list ].


是不是_r_1 := adv_-_tq_le &
  [ STEM < "是不々" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "是", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_是不是_a_1_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;modal verbs and their ambiguous forms
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

得_v_aux := v_vp_aux_le &
"""
[děi] to must; to ought to; to have to;
Auxiliaries are not subject raising verbs under the current implementation.
Which means that a test that we're using to differentiate these two classes
of verbs is whether that verb can be used to answer a question that used it. 

E.g. 谁 得 去 ？  (Who must go?) cannot be replied by:
<nex> 他 得 。
This indicates that 得 doesn't take 他 as subject when used in this matter.

Note: There is another entry for 得 with the meaning 'to obtain'.
"""
  [ STEM < "得" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "得", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_得_v_2_rel",
    SYNSEM.LOCAL.CAT.HEAD.LZG bu-asp,
    TRAITS native_token_list ].


会_n_1 := n_-_le &
  [ STEM < "会" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "会", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_会_n_1_rel",
    TRAITS native_token_list ].


会_v_aux :=  v_vp_aux_le &
  [ STEM < "会" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "会", LENGTH one ],
	SYNSEM.LKEYS.KEYREL.PRED "_会_v_aux_rel",
    TRAITS native_token_list ].

会_v_2 := v_np_le &
  [ STEM < "会" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "会", LENGTH one ],
    SYNSEM [ LKEYS.KEYREL.PRED "_会_v_2_rel" ],
    TRAITS native_token_list ].

会_v_3 := v_vp_sequi_le &
  [ STEM < "会" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "会", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_会_v_3_rel",
    TRAITS native_token_list ].

会不会_r_1 := adv_-_vp-pre_le &
  [ STEM < "会不会" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "会", LENGTH more-than-two ],
    SYNSEM.LKEYS.KEYREL.PRED "_会不会_a_1_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;;;;;
;;;; Conjunctions
;;;;;;;;;;;;;;;;;;;;;;;

和_c := conj_-_x_le &
  [ STEM < "和" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "和", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_和_coord_rel",
    TRAITS native_token_list ].

和_p := p_-_v-mod_le &
  [ STEM < "和" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "和", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_和_p_rel",
    TRAITS native_token_list ].

，_c_1 := conj_-_e_le &
  [ STEM < "，" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "，", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_，_coord_rel",
    TRAITS native_token_list ].

，_c_2 := conj_-_x_le &
  [ STEM < "，" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "，", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_，_coord_rel",
    TRAITS native_token_list ].

comma_c := conj_-_e_le &
  [ STEM < "," >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "，", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_，_coord_rel",
    TRAITS native_token_list ].

、_c_1 := conj_-_x_le &
  [ STEM < "、" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "、", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_、_coord_rel",
    TRAITS native_token_list ].

、_c_2 := conj_-_e_le &
  [ STEM < "、" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "、", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_、_coord_rel",
    TRAITS native_token_list ].

不仅_sc := conj_-_sub-pre_le &
  [ STEM < "不仅" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_不仅_coord_rel",
    TRAITS native_token_list ].

不但_sc := conj_-_sub-pre_le &
  [ STEM < "不但" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "不", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_不但_coord_rel",
    TRAITS native_token_list ].

以后_sc := conj_-_sub-post_le &
  [ STEM < "以后" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "以", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_以后_subord_rel",
    TRAITS native_token_list ].

可是_r_1 := adv_-_vp-pre_le &
  [ STEM < "可是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "可", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_可是_a_1_rel",
    TRAITS native_token_list ].

可是_sc := conj_-_sub-pre_le &
  [ STEM < "可是" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "可", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_可是_coord_rel",
    TRAITS native_token_list ].

因为_p := p_-_n-mod_le &
  [ STEM < "因为" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "因", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_因为_p_rel",
    TRAITS native_token_list ].

因为_sc := conj_-_sub-pre_le &
  [ STEM < "因为" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "因", LENGTH two ],
     SYNSEM.LKEYS.KEYREL.PRED "_因为_subord_rel",
    TRAITS native_token_list ].

所以_sc := conj_-_sub-pre_le &
  [ STEM < "所以" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "所", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_所以_subord_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; key adverbs
;;;;;;;;;;;;;;;;;;;;;;;;;

;;adv_-_vp-pre_le, should be scopal
也_r_1 := adv_-_scop-prehd_le &
"""
Should appear between the suvject and the verb.
"""
  [ STEM < "也" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "也", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_也_a_1_rel",
    TRAITS native_token_list ].

;;;;;;;;;;;;;;;;;;;
;;; KIV items (keep in view??)
;;;;;;;;;;;;;;;;;;;
过_r_1 := adv_-_deg-pre_le &
  [ STEM < "过" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "过", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_过_a_1_rel",
    TRAITS native_token_list ].


之一_n_1 := n_-_le &
  [ STEM < "之一" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "之", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_之一_n_1_rel",
    TRAITS native_token_list ].

至上_v_1 := v_-_le &
"""
[zhì shàng]  supreme; above all else

[FIXME] From multiple dictionaries, it seems this is best classified as an adjective that does not require degree specifiers (similar to some idioms, etc). But that is essentially the same as a verb with blocked for aspect.

There is some evidence it can be negated with 不, so I'm allowing it.
"""
  [ STEM < "至上" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "至", LENGTH two ],
    SYNSEM [ LOCAL.CAT.HEAD.LZG bu-asp, 
             LKEYS.KEYREL.PRED "_至上_v_1_rel" ],
    TRAITS native_token_list ].

近乎_r_1 :=  adv_-_deg-pre_le &
  [ STEM < "近乎" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "近", LENGTH one ],
    SYNSEM.LKEYS.KEYREL.PRED "_近乎_a_1_rel",
    TRAITS native_token_list ].

一反_v_1 := v_np_le &
  [ STEM < "一反" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "一", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_一反_v_1_rel",
    TRAITS native_token_list ].

少于_v_1 := v_np_le &
  [ STEM < "少于" >,
    SYNSEM.LOCAL.CAT.HEAD.CHAR [ FCHAR "少", LENGTH two ],
    SYNSEM.LKEYS.KEYREL.PRED "_少于_v_1_rel",
    TRAITS native_token_list ].
